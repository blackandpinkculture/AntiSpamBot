import asyncio
import aiogram
import time
import sqlite3

dp = aiogram.Dispatcher()
TOKEN = "TOKEN"
del_msg = True

conn = sqlite3.connect("database.db", check_same_thread=False)
cur = conn.cursor()

user_messages = {}
user_unvarns = {}

cur.execute('''
CREATE TABLE IF NOT EXISTS users (
userId INTEGER,
warning INTEGER,
chatId INTEGER)''')
cur.execute('''
CREATE TABLE IF NOT EXISTS stats (
userId INTEGER,
action TEXT,
date TEXT,
chatId INTEGER)
''')
conn.commit()

@dp.message()
async def new_message(message: aiogram.types.Message, bot) -> None:
	if message.chat.type == "private":
		await message.reply("—è —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –æ–±—â–∏—Ö —á–∞—Ç–∞—Ö! –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É, –Ω–∞–∑–Ω–∞—á—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∏ —Ç–≤–æ–π —á–∞—Ç –±—É–¥–µ—Ç –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")
		return
	 
	if message.from_user.id in user_messages:
		if int(time.time()) - user_messages[message.from_user.id] < 3:
			user_unvarns[message.from_user.id] += 1
			user_messages[message.from_user.id] = int(time.time())
		else:
			user_unvarns[message.from_user.id] = 0
			user_messages[message.from_user.id] = int(time.time())
	else:
		user_messages[message.from_user.id] = int(time.time()) 
		user_unvarns[message.from_user.id] = 0
		return

	if user_unvarns[message.from_user.id] >= 3:
		admin_list = []
		admins = await message.bot.get_chat_administrators(message.chat.id)
		for member in admins:
			admin_list.append(member.user.id)
		if message.from_user.id in admin_list:
			return
		user = cur.execute("SELECT * FROM users WHERE userId=? AND chatId=?", (message.from_user.id, message.chat.id, )).fetchone()
		if user:
			if user[1] < 3:
				await bot.delete_message(message.chat.id, message.message_id)
				cur.execute("UPDATE users SET warning=? WHERE userId=? AND chatId=?", (user[1]+1, message.from_user.id, message.chat.id, ))
				await message.answer(f"üõ°Ô∏è {message.from_user.username}, –≤—ã —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–∏—à–∏—Ç–µ! —É –≤–∞—Å {user[1]+1}/3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. –î–ª—è –æ–±–∂–∞–ª–∏–≤–∞–Ω–∏—è –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
			elif user[1] >= 3:
				cur.execute("DELETE FROM users WHERE userId=? AND chatId=?", (message.from_user.id, message.chat.id, ))
				now_time = time.strftime("%d.%m.%y - %H:%M:%S", time.localtime())
				action = f"–£—á–∞—Å—Ç–Ω–∏–∫ {message.from_user.first_name} ({message.from_user.username}) –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±–æ—Ç–æ–º –∑–∞ —Å–ø–∞–º."
				cur.execute("INSERT INTO stats(userId, action, date, chatId) VALUES(?, ?, ?, ?)", (message.from_user.id, action, now_time, message.chat.id, ))
				await bot.delete_message(message.chat.id, message.message_id)
				await bot.ban_chat_member(chat_id=message.chat.id, user_id=message.from_user.id, revoke_messages=del_msg)
				await message.answer(f"üõ°Ô∏è {message.from_user.username} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ –∑–∞ –Ω–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π —Å–ø–∞–º. –ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º - –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
		else:
			cur.execute("INSERT INTO users(userId, warning, chatId) VALUES(?, ?, ?)", (message.from_user.id, 1, message.chat.id, ))
			await message.reply(f"üõ°Ô∏è {message.from_user.username}, –≤—ã —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–∏—à–∏—Ç–µ! –£ –≤–∞—Å 1/3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. –î–ª—è –æ–±–∂–∞–ª–∏–≤–∞–Ω–∏—è –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		conn.commit()
	
	if message.text == "/spam_stat":
		admin_list = []
		admins = await message.bot.get_chat_administrators(message.chat.id)
		for member in admins:
			admin_list.append(member.user.id)
		if message.from_user.id in admin_list:
			history_chat = cur.execute("SELECT * FROM stats WHERE chatId=?", (message.chat.id, )).fetchall()
			if history_chat:
				msg = ""
				for history in history_chat:
					msg += f"–î–µ–π—Å—Ç–≤–∏–µ: {history[1]} \n–î–∞—Ç–∞: {history[2]}\n\n"
				await message.answer(f"üõ°Ô∏è –û—Ç—á—ë—Ç: \n\n{msg}")
			else:
				await message.answer("üìù –í –±–∞–∑–µ –Ω–µ—Ç—É –∑–∞–ø–∏—Å–µ–π –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
		else:
			await message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.")
	
	if message.text == "/clear_chat":
		admin_list = []
		admins = await message.bot.get_chat_administrators(message.chat.id)
		for member in admins:
			admin_list.append(member.user.id)
		if message.from_user.id in admin_list:
			quantity = message.message_id - 100
			if quantity < 100:
				await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª—ã—Ö 100 —Å–æ–æ–±—â–µ–Ω–∏–π. –í –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–Ω–µ–µ —Å–æ—Ç–Ω–∏.")
				return
			for msgId in range(quantity):
				await bot.delete_message(message.chat.id, msgId)
			await message.answer("‚úÖ –ß–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
		else:
			await message.reply("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.")

async def main() -> None:
	bot = aiogram.Bot(token=TOKEN)
	print("LOG IN")
	await dp.start_polling(bot)

if __name__ == "__main__":
	asyncio.run(main())
